// -------------------------------------------------------------------------------------------------//	Log// -------------------------------------------------------------------------------------------------function fConsoleLog(v){	if (typeof console == "undefined")		this.console = {log: function() {}};	console.log(v);	}// -------------------------------------------------------------------------------------------------//	Webservices// -------------------------------------------------------------------------------------------------function fValidateWebserviceOutput(jsonData){	//jsonData = trim(jsonData);	var ws_status = jsonData.ws_status;	var ws_message = jsonData.ws_message;	var ws_data = jsonData.ws_data;	if (ws_status == 200 || ws_status == 201)		return true;	var ws_service = jsonData.ws_service;	var friendly_error_string = "error in webservice '" + ws_service + "': " + ws_status + " - " + ws_message + "\n" + ws_data;	fConsoleLog(friendly_error_string);	alert(friendly_error_string);	return false;}//------------------------------------------------------------------------// Small non-UI utilities//------------------------------------------------------------------------function isArray(o){    return Object.prototype.toString.call(o) === '[object Array]';}function getObjectType(o){    return Object.prototype.toString.call(o);}function stringEndsWith(text, searchText){    return (text.match(searchText+"$")==searchText);}function stringStartsWith(text, searchText){    return (text.indexOf(searchText) === 0) ? true : false;}function stringContains(text, searchText){    return (text.indexOf(searchText) != -1);}function trim(s){    var l=0; var r=s.length -1;    while(l < s.length && s[l] == ' ')    {	l++;    }    while(r > l && s[r] == ' ')    {	r-=1;	}    return s.substring(l, r+1);}function trimNewLine(s){    return s.replace(new RegExp("\\n", "g"), "").replace(new RegExp("\\r", "g"), "");}function jsonEscapeNull(str){    return str.replace(":null", ":\"null\"");}function left(str, n){    if (n <= 0)        return "";    else if (n > String(str).length)        return str;    else        return String(str).substring(0,n);}function right(str, n){    if (n <= 0)       return "";    else if (n > String(str).length)       return str;    else {       var iLen = String(str).length;       return String(str).substring(iLen, iLen - n);    }}//------------------------------------------------------------------------// Numbers//------------------------------------------------------------------------function truncate(_value){    if (_value<0)   return Math.ceil(_value);    else            return Math.floor(_value);}function isNumber(n){    if (n == null)        return false;    return !isNaN(parseFloat(n)) && isFinite(n);}function getSign(value){    return value / Math.abs(value);}//------------------------------------------------------------------------// 2D vector utilities//------------------------------------------------------------------------function getCenterPoint(fromPt, toPt){    return Qt.point(fromPt.x/2 + toPt.x/2, fromPt.y/2 + toPt.y/2);}function getLength(fromPt, toPt){    var dx = toPt.x - fromPt.x;    var dy = toPt.y - fromPt.y;    return Math.sqrt(dx*dx + dy*dy);}function getIntermediatePoint(fromPt, toPt, percent){    var dx = toPt.x - fromPt.x;    var dy = toPt.y - fromPt.y;    return Qt.point(fromPt.x+dx*percent, fromPt.y+dy*percent);}function getAngleDegree(fromPt, toPt){    return getAngleRadian(fromPt, toPt) * 180.0 / Math.PI;}function getAngleRadian(fromPt, toPt){    var rad = 0;    var dx = toPt.x - fromPt.x;    var dy = toPt.y - fromPt.y;    if (dx == 0)        rad = dy/Math.abs(dy) * Math.PI / 2;    else                rad = Math.atan(dy/dx);    if (rad < 0)        rad += 2*Math.PI;    return rad;}//------------------------------------------------------------------------// 3D vector utilities//------------------------------------------------------------------------function getCenterPoint3D(fromPt, toPt){    return Qt.vector3d(fromPt.x/2 + toPt.x/2,                       fromPt.y/2 + toPt.y/2,                       fromPt.z/2 + toPt.z/2);}function getLength3D(fromPt, toPt){    var dx = toPt.x - fromPt.x;    var dy = toPt.y - fromPt.y;    var dz = toPt.z - fromPt.z;    return Math.sqrt(dx*dx + dy*dy + dz*dz);}function getIntermediatePoint3D(fromPt, toPt, percent){    var dx = toPt.x - fromPt.x;    var dy = toPt.y - fromPt.y;    var dz = toPt.z - fromPt.z;    return Qt.vector3d(fromPt.x+dx*percent, fromPt.y+dy*percent, fromPt.z+dz*percent);}//------------------------------------------------------------------------// Date time utilities//------------------------------------------------------------------------function getMonthNameFull(iMonth){    if (iMonth < 0 || iMonth > 11)        return "";    var monthNames = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];    return monthNames[iMonth];}function getMonthNameShort(iMonth){    if (iMonth < 0 || iMonth > 11)        return "";    var monthNamesShort = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];    return monthNamesShort[iMonth];}function getDayNameShort(iDay){    var dayNamesShort = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];    return dayNamesShort[iDay];}function getDayNameFull(iDay){    var dayNamesShort = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];    return dayNamesShort[iDay];}function daysInMonth(iMonth, iYear){    return 32 - new Date(iYear, iMonth, 32).getDate();}function getFirstDayOfMonth(iMonth, iYear){    var d = new Date(iYear, iMonth, 1);    return d.getDay();}